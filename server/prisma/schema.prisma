generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatusEnum {
  CREATEORDER
  ORDERPLACED
  ORDERSHIPPED
  ORDERRECEIVED
  ORDERDELIVERED
}

model Store {
  id       Int            @id @unique
  address  String 
  salesRep  Sales[]
}

model Manager {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String
}

model Sales {
  id              Int    @id @default(autoincrement())
  cognitoId       String @unique
  storeId         Int    @unique
  name            String
  email           String
  phoneNumber     String

  store           Store   @relation(fields: [storeId], references: [id])
  customerOrders  CustomerOrderDetails[]
  products        ProductDetails[]
}

model CustomerOrderDetails {
  invoiceNo        Int           @unique
  createdAt        DateTime?     @default(now())
  dateOrdered      DateTime?

  customerId       Int   
  customer         Customer       @relation(fields: [customerId], references: [id])

  salesRepId       Int
  salesRep         Sales          @relation(fields: [salesRepId], references: [id])

  status           OrderStatusEnum     @default(CREATEORDER)
  orderSummary     ProductOrder[]

  measurementPdf   String?          //s3 url
  customerCopyPdf  String?          //s3 url
  additionalFiles  String[]     @default([])    //s3 urls
}

model Customer {
  id            Int             @id @default(autoincrement()) 
  address       String
  name          String
  phone         String
  email         String
  orderHistory  CustomerOrderDetails[]
}

enum ProductEnum {
  Single
  Double
  RoundTop
  RoundTopDouble
  Window
  Railing
}

model ProductDetails {
  id           Int             @unique  @id @default(autoincrement())
  name         String?
  type         ProductEnum?
  dateOrdered  DateTime?       @default(now())
  color        String?
  height       Int?
  width        Int?
  length       Int?
  price        Float?
  status       String
  orders       ProductOrder[]
  photos       ProductPhoto[]
  salesRepId   Int
  createdBy    Sales           @relation(fields: [salesRepId], references: [id])
} 

enum ProductOrderStatusEnum {
  PROCESSING
  ORDERPLACED
  ENROUTE
  RECEIVED
  INSTOCK
  DELIVERED
}

model ProductOrder {
  orderNo         Int      @unique  @id @default(autoincrement())
  productId       Int
  
  customerInvoice Int?
  dateOrdered     DateTime

  section         Int?
  row             Int?

  dateStocked     DateTime?
  dateSold        DateTime?
  status          ProductOrderStatusEnum @default(PROCESSING)

  product         ProductDetails            @relation(fields: [productId], references: [id])
  customerOrder   CustomerOrderDetails?      @relation(fields: [customerInvoice], references: [invoiceNo])       
}

model ProductPhoto {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  url         String          //s3 url
  productId   Int
  product     ProductDetails  @relation(fields: [productId], references: [id])
}

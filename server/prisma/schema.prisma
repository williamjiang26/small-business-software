generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatusEnum {
  CREATEORDER
  ORDERPLACED
  ORDERSHIPPED
  ORDERRECEIVED
  ORDERDELIVERED
}

model Store {
  id       Int            @id @unique
  address  String 
  salesTeam Sales[]

  customerOrders CustomerOrderDetails[]
}

model Manager {
  id          Int    @id @default(autoincrement())
  cognitoId   String @unique
  name        String
  email       String
  phoneNumber String
  profilePic  String? 
}

model Sales {
  id              Int    @id @default(autoincrement())
  cognitoId       String @unique
  name            String
  email           String
  phoneNumber     String
  storeId         Int
  store           Store @relation(fields: [storeId], references: [id])
  customerOrders CustomerOrderDetails[]

}

model CustomerOrderDetails {
  invoiceNo        Int           @unique
  createdAt        DateTime?     @default(now())
  dateOrdered      DateTime?

  storeId         Int
  store           Store @relation(fields: [storeId], references: [id])

  salesId         Int
  sales           Sales @relation(fields: [salesId], references: [id])

  customerId       Int   
  customer         Customer       @relation(fields: [customerId], references: [id])

  status           OrderStatusEnum     @default(CREATEORDER)
  orderSummary     ProductOrder[]    

  
  measurementPdf   String?   // S3 URL
  customerCopyPdf  String?   // S3 URL
  additionalFiles  String[]  @default([]) // multiple S3 URLs
     
}

model Customer {
  id            Int             @id @default(autoincrement()) 
  address       String
  name          String
  phone         String
  email         String
  orderHistory  CustomerOrderDetails[]
}

enum ProductEnum {
  Single
  Double
  RoundTop
  RoundTopDouble
  Window
  Railing
}

model ProductDetails {
  id           Int             @id @default(autoincrement())
  name         String?
  type         ProductEnum?
  dateOrdered  DateTime?       @default(now())
  color        String?
  height       Int?
  width        Int?
  length       Int?
  price        Float?
  orders       ProductOrder[]
  photos       String[]         @default([])
} 

enum ProductOrderStatusEnum {
  PROCESSING
  ORDERPLACED
  ENROUTE
  RECEIVED
  INSTOCK
  DELIVERED
}

model ProductOrder {
  productOrderId  Int      @id  @default(autoincrement())


  productId       Int
  orderNo         Int?     @unique
  customerInvoice Int?
  dateOrdered     DateTime

  section         Int?
  row             Int?

  dateStocked     DateTime?
  dateSold        DateTime?
  status          ProductOrderStatusEnum @default(PROCESSING)

  product         ProductDetails            @relation(fields: [productId], references: [id])
  customerOrder   CustomerOrderDetails?      @relation(fields: [customerInvoice], references: [invoiceNo])       
}

 

 